{"version":3,"sources":["components/Header/favicon.svg","components/Concept/controller.svg","components/Header/index.js","components/Concept/index.js","components/DrilldownExample/index.js","components/DrilldownExample/sampleData.js","components/Docs/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","favIcon","alt","style","width","height","marginLeft","SubHeader","href","frameBorder","scrolling","title","Concept","map","item","key","display","margin","controllerImage","StatefulExample","toggleStaggered","staggered","state","setState","onSelect","name","selected","data","keyBy","parent","children","component","onClick","aria-label","role","sampleData","items","mapValues","this","itemComponents","currentTitle","header","footer","length","itemHeight","staggeredAnimation","onBackClick","type","checked","onChange","Component","CustomHeightExample","genres","setData","page","types","genresState","typesState","useState","content","ChildTest","React","forwardRef","props","ref","position","top","index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc53d481.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.785ff5c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/controller.8f637c10.svg\";","import React from 'react';\nimport './Header.css';\nimport favIcon from './favicon.svg';\n\nexport default function Header() {\n    return (\n        <header className=\"Header\">\n            <div className=\"Header-inner\">\n                <h1>\n                    <img src={favIcon} alt=\"React Drilldown logo\" style={{ width: 32, height: 32, marginLeft: -40 }} />{' '}\n                    React-Drilldown\n                </h1>\n                <h2>An iOS-style data-driven Drilldown Menu for React.</h2>\n            </div>\n        </header>\n    );\n}\n\nexport function SubHeader() {\n    return (\n        <div className=\"Header-subheader\">\n            <div className=\"Header-inner\">\n                <a href=\"https://github.com/lucastobrazil/react-drilldown\">Code and Docs on GitHub</a>\n                <iframe\n                    src=\"https://ghbtns.com/github-btn.html?user=lucastobrazil&repo=react-drilldown&type=star&count=true&size=large\"\n                    frameBorder=\"0\"\n                    scrolling=\"0\"\n                    width=\"160px\"\n                    height=\"30px\"\n                    title=\"Star Me!\"\n                />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Concept.css';\nimport controllerImage from './controller.svg';\nexport default function Concept() {\n    const classes = [\n        'RddItem-animateOutToRight',\n        'RddItem-animateOutToLeft',\n        'RddItem-animateInFromLeft',\n        'RddItem-animateInFromRight',\n    ];\n    return (\n        <section className=\"Concept\">\n            <div className=\"Concept-inner\">\n                <h1>The Concept</h1>\n                <p>\n                    The <code>react-drilldown</code> is actually quite simple. It displays a list of items (passed in as\n                    an array) and when it recevies a new list of items, it applies a CSS class to the old + new items.\n                    You can add which ever styles (and css animations) to these classes.\n                </p>\n                <h2>CSS Classes</h2>\n                <p>The four CSS classes you're able to style are:</p>\n                <ul>\n                    {classes.map(item => (\n                        <li key={item}>\n                            <code>{item}</code>\n                        </li>\n                    ))}\n                </ul>\n                <p>If you want to use the basic slide in / out as shown in these docs, get them here.</p>\n                <h2>Controller</h2>\n                <p>\n                    How you organise the data to be displayed in <code>react-drilldown</code> is entirely up to you. The\n                    'controller' could be returning a bunch of <code>&lt;Link&gt;</code> components from{' '}\n                    <code>react-router</code>, a simple list of strings* or your own React components.\n                </p>\n                <img style={{ display: 'block', margin: '0 auto' }} src={controllerImage} alt=\"Visualisation of controller\" />\n            </div>\n        </section>\n    );\n}\n","import React, { Component, useState } from 'react';\nimport { Drilldown, DrilldownButton } from 'react-drilldown';\nimport { mapValues } from 'lodash/fp';\nimport './style.css';\nimport { sampleData } from './sampleData';\n\nexport default class StatefulExample extends Component {\n    constructor() {\n        super();\n        this.state = {\n            staggered: true,\n            selected: 'foodType',\n        };\n\n        this.data = sampleData({ onSelect: this.onSelect });\n\n        this.items = mapValues(item => {\n            return {\n                ...item,\n                children: item.children.map(name => this.data[name].component),\n            };\n        }, this.data);\n    }\n\n    toggleStaggered = () => {\n        const { staggered } = this.state;\n        this.setState({ staggered: !staggered });\n    };\n\n    onSelect = name => this.setState({ selected: name });\n\n    render() {\n        const { selected, staggered } = this.state;\n        const itemComponents = this.items[selected].children;\n        const currentTitle = this.items[selected].title;\n        const parent = this.items[selected].parent;\n        return (\n            <div>\n                <div className=\"Example-container Example-custom-height\">\n                    <Drilldown\n                        header={currentTitle}\n                        footer={`${itemComponents.length} items`}\n                        items={itemComponents}\n                        itemHeight={81}\n                        staggeredAnimation={staggered}\n                        onBackClick={parent ? () => this.onSelect(parent) : null}\n                    />\n                </div>\n                <p>\n                    <label>\n                        <input type=\"checkbox\" checked={this.state.staggered} onChange={this.toggleStaggered} />\n                        Staggered Animation\n                    </label>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport function CustomHeightExample() {\n    const genres = [\n        () => <DrilldownButton onClick={() => setData({ page: 'types', data: types })}>Comedy</DrilldownButton>,\n        () => <DrilldownButton onClick={() => setData({ page: 'types', data: types })}>Romance</DrilldownButton>,\n    ];\n    const types = [\n        () => <DrilldownButton onClick={() => setData({ page: 'genres', data: genres })}>TV Shows</DrilldownButton>,\n        () => <DrilldownButton onClick={() => setData({ page: 'genres', data: genres })}>Movies</DrilldownButton>,\n        () => <DrilldownButton onClick={() => setData({ page: 'genres', data: genres })}>Books</DrilldownButton>,\n    ];\n\n    const genresState = { page: 'genres', data: genres };\n    const typesState = { page: 'types', data: types };\n\n    const [content, setData] = useState({ page: 'types', data: types });\n    const setBackAction = ({ page }) => (page === 'genres' ? typesState : genresState);\n    return (\n        <div className=\"Example-container\">\n            <Drilldown\n                header=\"Custom Height\"\n                items={content.data}\n                onBackClick={() => setData(setBackAction(content))}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { DrilldownButton, DrilldownLink } from 'react-drilldown';\nimport { keyBy } from 'lodash/fp';\n\n// const newStructure = ({ onSelect }) => ({\n//     name: 'foodType',\n//     title: 'Choose a Food Type',\n//     parent: null,\n//     children: [\n//         {\n//             name: 'healthy',\n//             title: 'Healthy Foods',\n//             parent: 'foodType',\n//             children: [\n//                 {\n//                     name: 'healthyFruits',\n//                     title: 'Healthy Fruits',\n//                     parent: 'healthy',\n//                     children: [\n//                         {\n//                             name: 'apple',\n//                             title: null,\n//                             parent: 'healthyFruits',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Apple</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'banana',\n//                             title: null,\n//                             parent: 'healthyFruits',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Banana</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'watermelon',\n//                             title: null,\n//                             parent: 'healthyFruits',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Watermelon</DrilldownLink>,\n//                         },\n//                     ],\n//                     component: () => (\n//                         <DrilldownButton onClick={() => onSelect('healthyFruits')}>Fruits</DrilldownButton>\n//                     ),\n//                 },\n\n//                 {\n//                     name: 'healthyVegetables',\n//                     title: 'Healthy Veges',\n//                     parent: 'healthy',\n//                     children: [\n//                         {\n//                             name: 'carrot',\n//                             title: null,\n//                             parent: 'healthyVegetables',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Carrot</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'pumpkin',\n//                             title: null,\n//                             parent: 'healthyVegetables',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Pumpkin</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'broccoli',\n//                             title: null,\n//                             parent: 'healthyVegetables',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Broccoli</DrilldownLink>,\n//                         },\n//                     ],\n//                     component: () => (\n//                         <DrilldownButton onClick={() => onSelect('healthyVegetables')}>Vegetables</DrilldownButton>\n//                     ),\n//                 },\n\n//                 {\n//                     name: 'healthyGrains',\n//                     title: 'Healthy Grains',\n//                     parent: 'healthy',\n//                     children: [\n//                         {\n//                             name: 'rice',\n//                             title: null,\n//                             parent: 'healthyGrains',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Rice</DrilldownLink>,\n//                         },\n//                     ],\n//                     component: () => <DrilldownButton onClick={() => onSelect('healthyGrains')}>Rice</DrilldownButton>,\n//                 },\n//             ],\n//             component: () => <DrilldownButton onClick={() => onSelect('healthy')}>Healthy</DrilldownButton>,\n//         },\n//         {\n//             name: 'unhealthy',\n//             title: 'Unhealthy Foods',\n//             parent: 'foodType',\n//             children: [\n//                 {\n//                     name: 'unhealthyCandy',\n//                     title: 'Unhealthy Candy',\n//                     parent: 'unhealthy',\n//                     children: [\n//                         {\n//                             name: 'jellybeans',\n//                             title: null,\n//                             parent: 'unhealthyCandy',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Jellybeans</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'chocolate',\n//                             title: null,\n//                             parent: 'unhealthyCandy',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Chocolate</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'licorice',\n//                             title: null,\n//                             parent: 'unhealthyCandy',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Licorice</DrilldownLink>,\n//                         },\n//                     ],\n//                     component: () => (\n//                         <DrilldownButton onClick={() => onSelect('unhealthyCandy')}>Candy</DrilldownButton>\n//                     ),\n//                 },\n\n//                 {\n//                     name: 'unhealthyFastFood',\n//                     title: 'Unhealthy Fast Food',\n//                     parent: 'unhealthy',\n//                     children: [\n//                         {\n//                             name: 'burgers',\n//                             title: null,\n//                             parent: 'unhealthyFastFood',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Burgers</DrilldownLink>,\n//                         },\n//                         {\n//                             name: 'burritos',\n//                             title: null,\n//                             parent: 'unhealthyFastFood',\n//                             children: [],\n//                             component: () => <DrilldownLink href=\"#\">Burritos</DrilldownLink>,\n//                         },\n//                     ],\n//                     component: () => (\n//                         <DrilldownButton onClick={() => onSelect('unhealthyFastFood')}>Fast Food</DrilldownButton>\n//                     ),\n//                 },\n//             ],\n//             component: () => <DrilldownButton onClick={() => onSelect('unhealthy')}>Unhealthy</DrilldownButton>,\n//         },\n//     ],\n// });\nconst sampleData = ({ onSelect }) =>\n    keyBy('name', [\n        {\n            name: 'foodType',\n            title: 'Choose a Food Type',\n            parent: null,\n            children: ['healthy', 'unhealthy'],\n        },\n        {\n            name: 'healthy',\n            title: 'Healthy Foods',\n            parent: 'foodType',\n            children: ['healthyFruits', 'healthyVegetables', 'healthyGrains'],\n            component: () => <DrilldownButton onClick={() => onSelect('healthy')}>Healthy</DrilldownButton>,\n        },\n        {\n            name: 'unhealthy',\n            title: 'Unhealthy Foods',\n            parent: 'foodType',\n            children: ['unhealthyCandy', 'unhealthyFastFood'],\n            component: () => <DrilldownButton onClick={() => onSelect('unhealthy')}>Unhealthy</DrilldownButton>,\n        },\n        {\n            name: 'healthyFruits',\n            title: 'Fruits 🍎',\n            parent: 'healthy',\n            children: ['apple', 'banana', 'watermelon'],\n            component: () => <DrilldownButton onClick={() => onSelect('healthyFruits')}>Fruits 🍎</DrilldownButton>,\n        },\n        {\n            name: 'apple',\n            title: null,\n            parent: 'healthyFruits',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Apple</DrilldownLink>,\n        },\n        {\n            name: 'banana',\n            title: null,\n            parent: 'healthyFruits',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Banana</DrilldownLink>,\n        },\n        {\n            name: 'watermelon',\n            title: null,\n            parent: 'healthyFruits',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Watermelon</DrilldownLink>,\n        },\n        {\n            name: 'healthyVegetables',\n            title: 'Vegetables 🎃',\n            parent: 'healthy',\n            children: ['carrot', 'pumpkin', 'broccoli'],\n            component: () => (\n                <DrilldownButton onClick={() => onSelect('healthyVegetables')}>Vegetables <span aria-label=\"pumpkin emoji\" role=\"img\">🎃</span></DrilldownButton>\n            ),\n        },\n        {\n            name: 'carrot',\n            title: null,\n            parent: 'healthyVegetables',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Carrot</DrilldownLink>,\n        },\n        {\n            name: 'pumpkin',\n            title: null,\n            parent: 'healthyVegetables',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Pumpkin</DrilldownLink>,\n        },\n        {\n            name: 'broccoli',\n            title: null,\n            parent: 'healthyVegetables',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Broccoli</DrilldownLink>,\n        },\n        {\n            name: 'healthyGrains',\n            title: 'Grains 🍚',\n            parent: 'healthy',\n            children: ['rice'],\n            component: () => <DrilldownButton onClick={() => onSelect('healthyGrains')}>Grains 🍚</DrilldownButton>,\n        },\n        {\n            name: 'rice',\n            title: null,\n            parent: 'healthyGrains',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Rice</DrilldownLink>,\n        },\n        {\n            name: 'unhealthyCandy',\n            title: 'Candy',\n            parent: 'unhealthy',\n            children: ['bonbons', 'chocolate', 'donuts'],\n            component: () => <DrilldownButton onClick={() => onSelect('unhealthyCandy')}>Candy 🍭</DrilldownButton>,\n        },\n        {\n            name: 'bonbons',\n            title: null,\n            parent: 'unhealthyCandy',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Bonbons 🍬</DrilldownLink>,\n        },\n        {\n            name: 'chocolate',\n            title: null,\n            parent: 'unhealthyCandy',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Chocolate 🍫</DrilldownLink>,\n        },\n        {\n            name: 'donuts',\n            title: null,\n            parent: 'unhealthyCandy',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Donuts 🍩</DrilldownLink>,\n        },\n        {\n            name: 'unhealthyFastFood',\n            title: 'Unhealthy Fast Food',\n            parent: 'unhealthy',\n            children: ['burgers', 'burritos'],\n            component: () => <DrilldownButton onClick={() => onSelect('unhealthyFastFood')}>Fast Food</DrilldownButton>,\n        },\n        {\n            name: 'burgers',\n            title: null,\n            parent: 'unhealthyFastFood',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Burgers</DrilldownLink>,\n        },\n        {\n            name: 'burritos',\n            title: null,\n            parent: 'unhealthyFastFood',\n            children: [],\n            component: () => <DrilldownLink href=\"#\">Burritos</DrilldownLink>,\n        },\n    ]);\nexport { sampleData };\n","import React from 'react';\n\nconst ChildTest = React.forwardRef((props, ref) => {\n    return (\n        <a ref={ref} style={{ position: 'absolute', top: props.index * 30 + 'px' }}>\n            child\n        </a>\n    );\n});\n\nclass HeightTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height: 0,\n        };\n        this.childElem = React.createRef();\n    }\n\n    componentDidMount() {\n        // Measure the height of one child\n        this.setState({ height: this.childElem.current.offsetHeight });\n    }\n\n    render() {\n        const { items } = this.props;\n        const PADDING = 20;\n        return (\n            <div\n                style={{\n                    position: 'relative',\n                    padding: PADDING,\n                    border: '1px solid red',\n                    height: 2 * PADDING + this.state.height * items.length + 'px',\n                    maxHeight: 200,\n                    overflow: 'scroll',\n                }}\n            >\n                {items.map(item => {\n                    return <ChildTest ref={this.childElem} index={item} key={item} />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default function Docs() {\n    const goo = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    return (\n        <div>\n            <h1>Docs!</h1>\n            <HeightTest items={goo} />\n            <pre />\n            <h2>Props</h2>\n            <ul>\n                <li>items</li>\n                <li>header</li>\n                <li>footer</li>\n                <li>staggeredAnimation</li>\n                <li>onBackClick</li>\n            </ul>\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport Header, { SubHeader } from './components/Header';\nimport Concept from './components/Concept';\nimport DrilldownExample, { CustomHeightExample } from './components/DrilldownExample';\nimport Docs from './components/Docs';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"App-Examples-container\">\n                    <DrilldownExample />\n                    <CustomHeightExample />\n                </div>\n                <SubHeader />\n                <Concept />\n                {/* <Docs /> */}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}